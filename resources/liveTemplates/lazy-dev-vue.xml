<templateSet group="lazy-dev-vue">
    <template name="tvcwp" value="import { mount, Wrapper } from '@vue/test-utils';&#10;import $COMPONENT_NAME$ from './$COMPONENT_NAME$.vue';&#10;&#10;describe('$COMPONENT_NAME$', () =&gt; {&#10;  it('should render', () =&gt; {&#10;    const aProperty = 'aProperty';&#10;    const wrapper: Wrapper&lt;$COMPONENT_NAME$&gt; = mount($COMPONENT_NAME$, {&#10;      propsData: {&#10;        aProperty&#10;      }&#10;    });&#10;&#10;    const domElement = wrapper.find('.aPropertyClassName').element;&#10;    expect(domElement.textContent).toMatch(aProperty);&#10;  });&#10;});" description="test vue component with property" toReformat="false" toShortenFQNames="true">
        <variable name="COMPONENT_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
        <context>
            <option name="TypeScript" value="true" />
        </context>
    </template>
    <template name="tvcwsmag" value="import Vuex from 'vuex';&#10;import { createLocalVue, mount } from '@vue/test-utils';&#10;&#10;import $COMPONENT_NAME$ from './$COMPONENT_NAME$.vue';&#10;&#10;const localVue = createLocalVue();&#10;&#10;localVue.use(Vuex);&#10;&#10;describe('$COMPONENT_NAME$', () =&gt; {&#10;    let store;&#10;    let actions;&#10;    let getters;&#10;    let mutations;&#10;&#10;    beforeEach(() =&gt; {&#10;        actions = {&#10;            '$MODULE_STORE_ACTION$': jest.fn().mockImplementation(() =&gt; {&#10;                connsole.log('$MODULE_STORE_ACTION$ called')&#10;            })&#10;        };&#10;&#10;        getters = {&#10;            '$MODULE_STORE_GETTER$': jest.fn().mockReturnValue(null)&#10;        };&#10;&#10;        mutations = {&#10;            '$MODULE_STORE_MUTATION$': jest.fn().mockReturnValue(null)&#10;        };&#10;&#10;        const $STORE_MODULE_NAME$ = {&#10;            '$STORE_MODULE_PREFIX$/$STORE_MODULE_NAME$': {&#10;                namespaced: true,&#10;                getters,&#10;                actions&#10;            }&#10;        };&#10;&#10;        store = new Vuex.Store({&#10;            modules: {&#10;                ...$STORE_MODULE_NAME$&#10;            }&#10;        });&#10;    });&#10;&#10;    it('should call store/module $MODULE_STORE_ACTION$', () =&gt; {&#10;        // setup&#10;        const wrapper = mount($COMPONENT_NAME$, {&#10;            store,&#10;            localVue&#10;        });&#10;        const aButton = wrapper.find('.insert-here-your-action-trigger-selector');&#10;&#10;        // action&#10;        aButton.trigger('click');&#10;&#10;        // expectations&#10;        expect(actions.$MODULE_STORE_ACTION$).toHaveBeenCalled();&#10;    });&#10;});&#10;" description="test vue component with store, mutation, action and getter" toReformat="false" toShortenFQNames="true">
        <variable name="COMPONENT_NAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
        <variable name="MODULE_STORE_ACTION" expression="" defaultValue="anAction" alwaysStopAt="true" />
        <variable name="MODULE_STORE_GETTER" expression="" defaultValue="aGetter" alwaysStopAt="true" />
        <variable name="MODULE_STORE_MUTATION" expression="" defaultValue="aMutation" alwaysStopAt="true" />
        <variable name="STORE_MODULE_PREFIX" expression="" defaultValue="aModulePrefix" alwaysStopAt="true" />
        <variable name="STORE_MODULE_NAME" expression="" defaultValue="aModule" alwaysStopAt="true" />
        <context>
            <option name="TypeScript" value="true" />
            <option name="Vue" value="true" />
        </context>
    </template>
</templateSet>
